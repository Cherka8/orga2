/**
 * Script de migration pour convertir les couleurs des √©v√©nements
 * de codes hexad√©cimaux vers des noms fran√ßais
 */

import { DataSource, Not, IsNull } from 'typeorm';
import { Event } from '../event/entities/event.entity';
import { Account } from '../auth/entities/account.entity';
import { Actor } from '../actor/entities/actor.entity';
import { Company } from '../company/entities/company.entity';
import { EventParticipant } from '../event-participant/entities/event-participant.entity';
import { Group } from '../group/entities/group.entity';
import { GroupMember } from '../group-member/entities/group-member.entity';
import { SharedCalendarAccessToken } from '../shared-calendar-access-token/entities/shared-calendar-access-token.entity';
import { getColorNameFromHex } from '../utils/color.utils';

// Configuration de la base de donn√©es (√† adapter selon votre configuration)
const AppDataSource = new DataSource({
  type: 'mysql',
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '3306'),
  username: process.env.DB_USERNAME || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'organaizer',
  entities: [
    Event,
    Account,
    Actor,
    Company,
    EventParticipant,
    Group,
    GroupMember,
    SharedCalendarAccessToken,
  ],
  synchronize: false,
});

async function migrateColors() {
  try {
    console.log('üöÄ D√©marrage de la migration des couleurs...');
    
    // Initialiser la connexion √† la base de donn√©es
    await AppDataSource.initialize();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');

    // R√©cup√©rer tous les √©v√©nements avec des couleurs
    const eventRepository = AppDataSource.getRepository(Event);
    const events = await eventRepository.find({
      where: {
        eventColor: Not(IsNull()),
      },
    });

    console.log(`üìä ${events.length} √©v√©nements trouv√©s avec des couleurs`);

    let migratedCount = 0;
    let skippedCount = 0;

    for (const event of events) {
      const currentColor = event.eventColor;
      
      // V√©rifier si la couleur existe et n'est pas null
      if (!currentColor) {
        console.log(`‚è≠Ô∏è  √âv√©nement ${event.id}: pas de couleur d√©finie`);
        skippedCount++;
        continue;
      }
      
      // V√©rifier si c'est d√©j√† un nom de couleur (ne commence pas par #)
      if (!currentColor.startsWith('#')) {
        console.log(`‚è≠Ô∏è  √âv√©nement ${event.id}: couleur "${currentColor}" d√©j√† au format nom`);
        skippedCount++;
        continue;
      }

      // Convertir le code hex en nom
      const colorName = getColorNameFromHex(currentColor);
      
      // Si la conversion a r√©ussi (le nom n'est pas le m√™me que le code hex)
      if (colorName !== currentColor) {
        event.eventColor = colorName;
        await eventRepository.save(event);
        console.log(`‚úÖ √âv√©nement ${event.id}: "${currentColor}" ‚Üí "${colorName}"`);
        migratedCount++;
      } else {
        console.log(`‚ö†Ô∏è  √âv√©nement ${event.id}: couleur "${currentColor}" non reconnue dans la palette`);
        skippedCount++;
      }
    }

    console.log('\nüìà R√©sum√© de la migration:');
    console.log(`   ‚Ä¢ ${migratedCount} √©v√©nements migr√©s`);
    console.log(`   ‚Ä¢ ${skippedCount} √©v√©nements ignor√©s`);
    console.log('‚úÖ Migration termin√©e avec succ√®s!');

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
  } finally {
    // Fermer la connexion
    if (AppDataSource.isInitialized) {
      await AppDataSource.destroy();
      console.log('üîå Connexion ferm√©e');
    }
  }
}

// Ex√©cuter la migration si le script est appel√© directement
if (require.main === module) {
  migrateColors();
}

export { migrateColors };
